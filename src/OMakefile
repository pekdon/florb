# Make sure we have an up-to-date OMake version (Important for foreach support)
OMakeVersion(0.9.8.6)

# Program name
PROGRAM = florb

# Check if prefix is defined
if $(not $(defined PREFIX))
	PREFIX = /usr
	export

LOCALEDIR = $(PREFIX)/share/locale
RESOURCEDIR = $(PREFIX)/share/res

# Absolute path for locale and resource directories
LOCALEDIR = $(absname $(LOCALEDIR))
RESOURCEDIR = $(absname $(RESOURCEDIR))

# Compiler flags
CXX = $(shell fltk-config --cxx)
CXXFLAGS = -std=c++11 -Wall -O2 -funroll-loops \
	-DLOCALEDIR=\"$(LOCALEDIR)\" \
	-DRESOURCEDIR=\"$(RESOURCEDIR)\" \
    $(shell fltk-config --use-images --cxxflags) \
	$(shell curl-config --cflags) \
	$(shell pkg-config --cflags tinyxml2) \
	$(shell pkg-config --cflags libgps) \
	$(shell pkg-config --cflags x11) \
	$(shell pkg-config --cflags xpm) \
	$(shell pkg-config --cflags yaml-cpp)

# Do a debug build if requested
if $(defined DEBUG)
	CXXFLAGS += -g
	export

#Linker flags
LDFLAGS = \
	$(shell fltk-config --use-images --ldflags) \
	$(shell curl-config --libs) \
	$(shell pkg-config --libs tinyxml2) \
	$(shell pkg-config --libs libgps) \
	$(shell pkg-config --libs x11) \
	$(shell pkg-config --libs yaml-cpp) \
	$(shell pkg-config --libs xpm) \
	-lpthread \
	-lboost_system \
    -lboost_filesystem \
    -lboost_thread

# Phony targets
.PHONY: clean install i18nupdate i18ncompile

# Object files to be combined into the program binary. The last line combines
# fluid and regular source objects and eliminates duplicates for when fluid has
# already generated .cpp files.
OBJS_FLUID = $(rootname $(find . -name *.fl))
OBJS_CPP   = $(rootname $(find . -name *.cpp))
OBJS_RES   = $(rootname $(find . -name *.res))
OBJS       = $(set $(OBJS_FLUID) $(OBJS_CPP) $(OBJS_RES))

TRANSLATIONS[] += de_DE

# (Re-)generate version string (version.hpp) from repository information if present
version.hpp: :exists: ../.git/HEAD :exists: ../.git/index gittags.txt :value: $(shell ./gittags.sh) version.txt ./mkversionhpp.sh
    ./mkversionhpp.sh

# Rule for generating CPP code from fluid sources
%.cpp: %.fl
    fluid -c -o $@ -h $(replacesuffixes .cpp, .h, $@) $<

# Rule for generating binary resources
%.o: %.res
    $(LD) -r -b binary -o $@ $<

# Dependency scanner
.SCANNER: %.o: %.cpp :value: $(digest-in-path-optional $(INCLUDES), $&)
    $(CXX) -MM $(addprefix -I, $(INCLUDES)) $<

# Handle subdirectories
.SUBDIRS: ./fluid ./res
	INCLUDES[] += ../

# Build the program
CGeneratedFiles($(addsuffix .cpp, $(OBJS_FLUID)) $(addsuffix .o, $(OBJS_RES)) version.hpp)
CXXProgram($(PROGRAM)$(EXE), $(OBJS))
.DEFAULT: $(PROGRAM)$(EXE)

# install target
install:
	mkdir($(PREFIX)/bin/ -p)
	install $(PROGRAM) $(PREFIX)/bin/
	mkdir -p $(RESOURCEDIR)
	#install ../LICENSE.txt $(RESOURCEDIR)
	foreach(t => ..., $(basename $(TRANSLATIONS)))
		mkdir -p $(LOCALEDIR)/$(t)/LC_MESSAGES/
		install ./i18n/$(t).mo $(LOCALEDIR)/$(t)/LC_MESSAGES/

# clean target
clean:
	$(rm -f $(PROGRAM) $(addsuffix .cpp, $(OBJS_FLUID)) $(addsuffix .hpp, $(OBJS_FLUID)) $(addsuffix .o, $(OBJS)) $(addsuffix .res.pot, $(OBJS_RES)) i18n/all.pot OMakefile.omc OMakeroot.omc)

# update translation files
i18nupdate:
	xgettext -d florb -s -o i18n/$(PROGRAM).pot --keyword=_ --from-code=utf-8  $(find ./ -name *.cpp) $(find ./ -name *.hpp)
	foreach(t => ..., $(addsuffix .res, $(OBJS_RES)))
		txt2po -P -i $(t) -o $(t).pot
	msgcat -o i18n/all.pot $(addsuffix .res.pot, $(OBJS_RES)) i18n/$(PROGRAM).pot
	foreach(t => ..., $(basename $(TRANSLATIONS)))
	    if $(file-exists ./i18n/$(t).po)
			msgmerge -U ./i18n/$(t).po i18n/all.pot
	    else
			msginit --no-translator -l $(t).utf8 -o ./i18n/$(t).po -i i18n/all.pot

# compile translations
i18ncompile:
	foreach(t => ..., $(basename $(TRANSLATIONS)))
		msgfmt -c -o ./i18n/$(t).mo ./i18n/$(t).po
